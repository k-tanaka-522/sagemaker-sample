AWSTemplateFormatVersion: '2010-09-09'
Description: 'Custom Resource Stack - Lambda functions for SageMaker notebook creation'

# ========================================
# パラメータセクション
# ========================================
Parameters:
  ProjectName:
    Type: String
    Description: 'Project name'
  
  Environment:
    Type: String
    Description: 'Environment name'

# ========================================
# リソースセクション
# ========================================
Resources:
  # カスタムリソース用のLambda実行ロール
  # このロールはLambda関数がSageMakerノートブックインスタンスを作成・削除するために必要な権限を持つ
  CustomResourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-custom-resource-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Lambda サービスがこのロールを引き受けることを許可
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        # Lambda関数の基本的な実行権限（CloudWatchLogsへの書き込み等）
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        # SageMakerノートブックインスタンスの管理権限
        - PolicyName: !Sub '${ProjectName}-${Environment}-sagemaker-notebook-management'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # SageMakerノートブックインスタンスの作成・更新・削除権限
              - Effect: Allow
                Action:
                  - 'sagemaker:CreateNotebookInstance'
                  - 'sagemaker:DeleteNotebookInstance'
                  - 'sagemaker:DescribeNotebookInstance'
                  - 'sagemaker:StopNotebookInstance'
                  - 'sagemaker:StartNotebookInstance'
                  - 'sagemaker:UpdateNotebookInstance'
                  - 'sagemaker:ListTags'
                  - 'sagemaker:AddTags'
                  - 'sagemaker:DeleteTags'
                Resource: !Sub 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:notebook-instance/*'
              
              # ノートブックインスタンスライフサイクル設定の参照権限
              - Effect: Allow
                Action:
                  - 'sagemaker:DescribeNotebookInstanceLifecycleConfig'
                Resource: !Sub 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:notebook-instance-lifecycle-config/*'
              
              # IAMロールのPassRole権限（SageMakerにロールを渡すため）
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
                Condition:
                  StringEquals:
                    'iam:PassedToService': 'sagemaker.amazonaws.com'
              
              # VPC関連リソースの参照権限（VPC内にノートブックを作成する場合）
              - Effect: Allow
                Action:
                  - 'ec2:DescribeVpcs'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeSecurityGroups'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-custom-resource-lambda-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # SageMakerノートブックインスタンスを管理するLambda関数
  # CloudFormationのカスタムリソースとして動作し、CREATE/UPDATE/DELETE操作を処理
  SageMakerNotebookLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-sagemaker-notebook-handler'
      Description: 'Lambda function to handle SageMaker notebook instance lifecycle'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt CustomResourceLambdaRole.Arn
      Timeout: 900  # 15分（ノートブックインスタンスの作成に時間がかかる場合があるため）
      MemorySize: 256
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import time
          import logging
          
          # ロギングの設定
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          # SageMakerクライアントの初期化
          sagemaker = boto3.client('sagemaker')
          
          def handler(event, context):
              """
              CloudFormationカスタムリソースのハンドラー関数
              CREATE、UPDATE、DELETEリクエストを処理する
              """
              logger.info(f"Received event: {json.dumps(event)}")
              
              # リクエストタイプとリソースプロパティを取得
              request_type = event['RequestType']
              resource_properties = event['ResourceProperties']
              physical_resource_id = event.get('PhysicalResourceId', '')
              
              try:
                  # ノートブックインスタンス名を取得
                  notebook_name = resource_properties['NotebookInstanceName']
                  
                  if request_type == 'Create':
                      # 新規ノートブックインスタンスの作成
                      physical_resource_id = create_notebook_instance(resource_properties)
                      
                  elif request_type == 'Update':
                      # 既存ノートブックインスタンスの更新
                      physical_resource_id = update_notebook_instance(
                          physical_resource_id, 
                          resource_properties, 
                          event.get('OldResourceProperties', {})
                      )
                      
                  elif request_type == 'Delete':
                      # ノートブックインスタンスの削除
                      delete_notebook_instance(physical_resource_id)
                  
                  # CloudFormationに成功を通知
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'NotebookInstanceName': notebook_name
                  }, physical_resource_id)
                  
              except Exception as e:
                  logger.error(f"Error handling {request_type}: {str(e)}")
                  # CloudFormationに失敗を通知
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Error': str(e)
                  }, physical_resource_id)
          
          def create_notebook_instance(properties):
              """
              SageMakerノートブックインスタンスを作成する
              """
              notebook_name = properties['NotebookInstanceName']
              
              # 作成パラメータの構築
              create_params = {
                  'NotebookInstanceName': notebook_name,
                  'InstanceType': properties['InstanceType'],
                  'RoleArn': properties['RoleArn'],
                  'SubnetId': properties['SubnetId'],
                  'SecurityGroupIds': properties['SecurityGroupIds'],
                  'VolumeSizeInGB': int(properties.get('VolumeSizeInGB', 30))
              }
              
              # オプションパラメータの追加
              if 'LifecycleConfigName' in properties:
                  create_params['LifecycleConfigName'] = properties['LifecycleConfigName']
              
              if 'DefaultCodeRepository' in properties:
                  create_params['DefaultCodeRepository'] = properties['DefaultCodeRepository']
              
              # タグの追加
              if 'Tags' in properties:
                  create_params['Tags'] = properties['Tags']
              
              # ノートブックインスタンスの作成
              logger.info(f"Creating notebook instance: {notebook_name}")
              response = sagemaker.create_notebook_instance(**create_params)
              
              # インスタンスが作成されるまで待機
              wait_for_notebook_status(notebook_name, 'InService')
              
              return notebook_name
          
          def update_notebook_instance(physical_id, new_properties, old_properties):
              """
              SageMakerノートブックインスタンスを更新する
              """
              notebook_name = physical_id
              
              # 更新可能なプロパティのチェック
              updatable_properties = ['InstanceType', 'RoleArn', 'VolumeSizeInGB']
              needs_update = False
              update_params = {'NotebookInstanceName': notebook_name}
              
              for prop in updatable_properties:
                  if new_properties.get(prop) != old_properties.get(prop):
                      needs_update = True
                      if prop == 'VolumeSizeInGB':
                          update_params[prop] = int(new_properties[prop])
                      else:
                          update_params[prop] = new_properties[prop]
              
              if needs_update:
                  # ノートブックインスタンスを停止
                  logger.info(f"Stopping notebook instance: {notebook_name}")
                  sagemaker.stop_notebook_instance(NotebookInstanceName=notebook_name)
                  wait_for_notebook_status(notebook_name, 'Stopped')
                  
                  # ノートブックインスタンスを更新
                  logger.info(f"Updating notebook instance: {notebook_name}")
                  sagemaker.update_notebook_instance(**update_params)
                  
                  # ノートブックインスタンスを再起動
                  logger.info(f"Starting notebook instance: {notebook_name}")
                  sagemaker.start_notebook_instance(NotebookInstanceName=notebook_name)
                  wait_for_notebook_status(notebook_name, 'InService')
              
              return notebook_name
          
          def delete_notebook_instance(physical_id):
              """
              SageMakerノートブックインスタンスを削除する
              """
              notebook_name = physical_id
              
              try:
                  # ノートブックインスタンスの状態を確認
                  response = sagemaker.describe_notebook_instance(
                      NotebookInstanceName=notebook_name
                  )
                  status = response['NotebookInstanceStatus']
                  
                  # InServiceの場合は停止
                  if status == 'InService':
                      logger.info(f"Stopping notebook instance: {notebook_name}")
                      sagemaker.stop_notebook_instance(NotebookInstanceName=notebook_name)
                      wait_for_notebook_status(notebook_name, 'Stopped')
                  
                  # ノートブックインスタンスを削除
                  logger.info(f"Deleting notebook instance: {notebook_name}")
                  sagemaker.delete_notebook_instance(NotebookInstanceName=notebook_name)
                  
              except sagemaker.exceptions.ClientError as e:
                  if e.response['Error']['Code'] == 'RecordNotFound':
                      logger.info(f"Notebook instance {notebook_name} not found, skipping deletion")
                  else:
                      raise
          
          def wait_for_notebook_status(notebook_name, target_status, max_attempts=60):
              """
              ノートブックインスタンスが指定されたステータスになるまで待機する
              """
              attempt = 0
              while attempt < max_attempts:
                  try:
                      response = sagemaker.describe_notebook_instance(
                          NotebookInstanceName=notebook_name
                      )
                      current_status = response['NotebookInstanceStatus']
                      
                      logger.info(f"Notebook {notebook_name} status: {current_status}")
                      
                      if current_status == target_status:
                          return
                      elif current_status == 'Failed':
                          raise Exception(f"Notebook instance {notebook_name} failed")
                      
                      time.sleep(30)  # 30秒待機
                      attempt += 1
                      
                  except sagemaker.exceptions.ClientError as e:
                      if e.response['Error']['Code'] == 'RecordNotFound' and target_status == 'Deleted':
                          return
                      raise
              
              raise Exception(f"Timeout waiting for notebook {notebook_name} to reach {target_status}")
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-sagemaker-notebook-handler'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Lambda関数のCloudWatchロググループ
  # ログの保持期間を設定し、不要なログの蓄積を防ぐ
  CustomResourceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SageMakerNotebookLambda}'
      RetentionInDays: 7  # 7日間ログを保持

# ========================================
# 出力セクション
# ========================================
Outputs:
  CustomResourceServiceToken:
    Description: 'Custom resource service token ARN'
    Value: !GetAtt SageMakerNotebookLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CustomResourceServiceToken'
  
  LambdaFunctionName:
    Description: 'Lambda function name'
    Value: !Ref SageMakerNotebookLambda
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'